.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PyMOLUtil 1"
.TH PyMOLUtil 1 "2018-09-11" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PyMOLUtil
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
import PyMOLUtil
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBPyMOLUtil\fR module provides the following functions:
.PP
CalculateCenterOfMass, ConvertFileFormat, ConvertPMLFileToPSEFile, GetChains,
GetChainsAndLigandsInfo, GetInorganicResiduesInfo, GetLargestLigand,
GetLigandResiduesInfo, GetLigands, GetMolecules, GetPocketInorganicResiduesInfo,
GetPocketPolymerResiduesInfo, GetPocketSolventResiduesInfo,
GetPolymerResiduesInfo, GetSolventResiduesInfo,
ProcessChainsAndLigandsOptionsInfo, SetupPMLForAlignment,
SetupPMLForBFactorPuttyView, SetupPMLForBallAndStickView,
SetupPMLForEnableDisable, SetupPMLForGroup, SetupPMLForHydrophobicSurfaceView,
SetupPMLForInorganicView, SetupPMLForLigandPocketInorganicView,
SetupPMLForLigandPocketSolventView, SetupPMLForLigandPocketView,
SetupPMLForLigandView, SetupPMLForPolarContactsView,
SetupPMLForPolymerChainComplexView, SetupPMLForPolymerChainView,
SetupPMLForPolymerComplexView, SetupPMLForSolventView, SetupPMLForSurfaceView,
SetupPMLHeaderInfo
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBCalculateCenterOfMass\fR" 4
.IX Item "CalculateCenterOfMass"
.Vb 1
\&    CalculateCenterOfMass(Selection = "all", Quiet = 0)
.Ve
.Sp
Calculate center of mass for a selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    Selection (str): A PyMOL selection.
\&    Quiet (int): Print information.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    list: X, Y, Z coordinates for center of mass.
.Ve
.IP "\fBConvertFileFormat\fR" 4
.IX Item "ConvertFileFormat"
.Vb 1
\&    ConvertFileFormat(Infile, Outfile, Reinitialize = True, OutputFeedback = True)
.Ve
.Sp
Convert infile to outfile by automatically detecting their formats
from the file extensions.
.Sp
The formats of both input and output files must be a valid format supported
by PyMOL.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 4
\&    Infile (str): Name of input file.
\&    Outfile (str): Name of outfile file.
\&    Reinitialize (bool): Reinitialize PyMOL before loading input file.
\&    OutputFeedback (bool): Control output feedback.
.Ve
.IP "\fBConvertPMLFileToPSEFile\fR" 4
.IX Item "ConvertPMLFileToPSEFile"
.Vb 1
\&    ConvertPMLFileToPSEFile(PMLFile, PSEFile, Reinitialize = True, OutputFeedback = True)
.Ve
.Sp
Convert \s-1PML\s0 file to \s-1PME\s0 file.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 4
\&    PMLFile (str): Name of PML file.
\&    PSEFile (str): Name of PSE file.
\&    Reinitialize (bool): Reinitialize PyMOL before loading PML file.
\&    OutputFeedback (bool): Control output feedback.
.Ve
.IP "\fBGetChains\fR" 4
.IX Item "GetChains"
.Vb 1
\&    GetChains(MoleculeName, RemoveEmpty = True)
.Ve
.Sp
Get chain identifiers present in a molecule.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 3
\&    MoleculeName (str): Name of a PyMOL molecule object.
\&    RemoveEmpty (bool): Remove empty chain ID from the list of chain IDs
\&        returned by PyMOL.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 2
\&    list: Names of chains present in a molecule, sorted alphabetically in a
\&        ascending order.
.Ve
.IP "\fBGetChainsAndLigandsInfo\fR" 4
.IX Item "GetChainsAndLigandsInfo"
.Vb 1
\&    GetChainsAndLigandsInfo(Infile, MolName, Quite = False, LigandSortBy = "Size", LigandSortOrder = "Auto", LigandIgnoreHydrogens = "Yes")
.Ve
.Sp
Get chain identifiers present in a molecule along with names of the
ligands present in chains. Ligands are identified using PyMOL 'organic'
selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 12
\&    Infile (str) : Name of a file.
\&    MolName (str) : Name to use for PyMOL molecule object.
\&    Quite (bool) : Flag 
\&    LigandSortBy (str): Sort ligand names alphabetically or by size. Possible
\&        values: Alphabetical or Size
\&    LigandSortOrder (str): Sort order for sorting ligands. Possible values:
\&        Ascending, Descending, Auto. The \*(AqAuto\*(Aq value implies automatic
\&        determination of sort order based on the value of \*(AqSortBy\*(Aq.
\&        Automatic defaults: Descending for SortBy value of Size; Ascending
\&        for SortBy value of Alphabetical.
\&    LigandIgnoreHydrogens (str): Ignore hydrogens during determination of ligand
\&        size.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 4
\&    dict: A dictionary containing list of chain identifiers and dictionaries
\&        of chains containing lists of ligand names for each chain. Names of
\&        ligands present in chain for a molecule sorted by size or
\&        alphabetically.
.Ve
.Sp
\&\fIExample(s):\fR
.Sp
.Vb 5
\&    ChainsAndLigandsInfo = GetChainsAndLigandsInfo(Infile, MolName)
\&    for ChainID in ChainsAndLigandsInfo["ChainIDs"]:
\&        for LigandID in ChainsAndLigandsInfo["LigandIDs"][ChainID]:
\&            MiscUtil.PrintInfo("ChainID: %s; LigandID: %s" % (ChainID,
\&                LigandID))
.Ve
.IP "\fBGetInorganicResiduesInfo\fR" 4
.IX Item "GetInorganicResiduesInfo"
.Vb 1
\&    GetInorganicResiduesInfo(MoleculeName, ChainName)
.Ve
.Sp
Get information for inorganic residues present in a chain of a  molecule.
Inorganic residues are identified using PyMOL 'inorganic' selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    MoleculeName (str): Name of a PyMOL molecule object.
\&    ChainName (str): Name of a chain in a molecule.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 3
\&    dict: A dictionary containing list of residue names and dictionaries of
\&        residue numbers and residue count for each residue. Names of 
\&        residues in the dictionary are not sorted.
.Ve
.Sp
\&\fIExample(s):\fR
.Sp
.Vb 6
\&    ResiduesInfo = GetInorganicResiduesInfo(MolName, ChainName)
\&    for ResName in ResiduesInfo["ResNames"]:
\&        ResCount = ResiduesInfo["ResCount"][ResName]
\&        ResNums = ResiduesInfo["ResNum"][ResName]
\&        MiscUtil.PrintInfo("ResName: %s; ResCount: %s; ResNums: %s" %
\&            (ResName, ResCount, ResNums))
.Ve
.IP "\fBGetLargestLigand\fR" 4
.IX Item "GetLargestLigand"
.Vb 1
\&    GetLargestLigand(MoleculeName, ChainName, IgnoreHydrogens = \*(AqYes\*(Aq)
.Ve
.Sp
Get name of the largest ligand for a chain present in a molecule. Ligands
are identified using PyMOL 'organic' selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    IgnoreHydrogens (str): Ignore hydrogens during determination of ligand
\&        size.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: Name of the largest ligand present in a chain.
.Ve
.IP "\fBGetLigandResiduesInfo\fR" 4
.IX Item "GetLigandResiduesInfo"
.Vb 1
\&    GetLigandResiduesInfo(MoleculeName, ChainName)
.Ve
.Sp
Get information for ligand residues present in a chain of a  molecule.
Ligands are identified using PyMOL 'organic' selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    MoleculeName (str): Name of a PyMOL molecule object.
\&    ChainName (str): Name of a chain in a molecule.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 3
\&    dict: A dictionary containing list of residue names and dictionaries of
\&        residue numbers and residue count for each residue. Names of 
\&        residues in the dictionary are not sorted.
.Ve
.Sp
\&\fIExample(s):\fR
.Sp
.Vb 6
\&    ResiduesInfo = GetLigandResiduesInfo(MolName, ChainName)
\&    for ResName in ResiduesInfo["ResNames"]:
\&        ResCount = ResiduesInfo["ResCount"][ResName]
\&        ResNums = ResiduesInfo["ResNum"][ResName]
\&        MiscUtil.PrintInfo("ResName: %s; ResCount: %s; ResNums: %s" %
\&            (ResName, ResCount, ResNums))
.Ve
.IP "\fBGetLigands\fR" 4
.IX Item "GetLigands"
.Vb 1
\&    GetLigands(MoleculeName, ChainName, SortBy = "Size", SortOrder = "Auto", IgnoreHydrogens = "Yes")
.Ve
.Sp
Get names of ligands present in a chain of a  molecule. Ligands are
identified using PyMOL 'organic' selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 11
\&    MoleculeName (str): Name of a PyMOL molecule object.
\&    ChainName (str): Name of a chain in a molecule.
\&    SortBy (str): Sort ligand names alphabetically or by size. Possible
\&        values: Alphabetical or Size
\&    SortOrder (str): Sort order for sorting ligands. Possible values:
\&        Ascending, Descending, Auto. The \*(AqAuto\*(Aq value implies automatic
\&        determination of sort order based on the value of \*(AqSortBy\*(Aq.
\&        Automatic defaults: Descending for SortBy value of Size; Ascending
\&        for SortBy value of Alphabetical.
\&    IgnoreHydrogens (str): Ignore hydrogens during determination of ligand
\&        size.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 2
\&    list: Names of ligands present in chain for a molecule sorted by size
\&        or alphabetically.
.Ve
.IP "\fBGetMolecules\fR" 4
.IX Item "GetMolecules"
.Vb 1
\&    GetMolecules(Selection = "all")
.Ve
.Sp
Get names of molecule objects in a selection or all molecule objects.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 1
\&    Selection: (str): A PyMOL selection.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    list: Names of molecule objects.
.Ve
.IP "\fBGetPocketInorganicResiduesInfo\fR" 4
.IX Item "GetPocketInorganicResiduesInfo"
.Vb 1
\&    GetPocketInorganicResiduesInfo(MoleculeName, ChainName, LigandResName, LigandResNum, PocketDistanceCutoff)
.Ve
.Sp
Get information for inorganic residues present in a pocket around a
ligand in a molecule. Inorganic residues are identified using PyMOL
\&'inorganic' selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 6
\&    MoleculeName (str): Name of a PyMOL molecule object.
\&    ChainName (str): Name of a chain in a molecule.
\&    LigandResName (str): Residue name of a ligand in a chain.
\&    LigandResNum (str): Residue number of a ligand in a chain.
\&    PocketDistanceCutoff (float): Distance around a ligand to identify
\&        pocket residues.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 3
\&    dict: A dictionary containing list of residue names and dictionaries of
\&        residue numbers and residue count for each residue. Names of 
\&        residues in the dictionary are not sorted.
.Ve
.Sp
\&\fIExample(s):\fR
.Sp
.Vb 6
\&    ResiduesInfo = GetPocketInorganicResiduesInfo(MolName, ChainName)
\&    for ResName in ResiduesInfo["ResNames"]:
\&        ResCount = ResiduesInfo["ResCount"][ResName]
\&        ResNums = ResiduesInfo["ResNum"][ResName]
\&        MiscUtil.PrintInfo("ResName: %s; ResCount: %s; ResNums: %s" %
\&            (ResName, ResCount, ResNums))
.Ve
.IP "\fBGetPocketPolymerResiduesInfo\fR" 4
.IX Item "GetPocketPolymerResiduesInfo"
.Vb 1
\&    GetPocketPolymerResiduesInfo(MoleculeName, ChainName, LigandResName, LigandResNum, PocketDistanceCutoff)
.Ve
.Sp
Get information for chain residues present in a pocket around a ligand
in a molecule. Polymer residues are identified using negation of PyMOL
selection operators 'organic', 'solvent', and 'inorganic'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 6
\&    MoleculeName (str): Name of a PyMOL molecule object.
\&    ChainName (str): Name of a chain in a molecule.
\&    LigandResName (str): Residue name of a ligand in a chain.
\&    LigandResNum (str): Residue number of a ligand in a chain.
\&    PocketDistanceCutoff (float): Distance around ligand to identify pocket
\&        residues.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 3
\&    dict: A dictionary containing list of residue names and dictionaries of
\&        residue numbers and residue count for each residue. Names of 
\&        residues in the dictionary are not sorted.
.Ve
.Sp
\&\fIExample(s):\fR
.Sp
.Vb 6
\&    ResiduesInfo = GetPocketPolymerResiduesInfo(MolName, ChainName)
\&    for ResName in ResiduesInfo["ResNames"]:
\&        ResCount = ResiduesInfo["ResCount"][ResName]
\&        ResNums = ResiduesInfo["ResNum"][ResName]
\&        MiscUtil.PrintInfo("ResName: %s; ResCount: %s; ResNums: %s" %
\&            (ResName, ResCount, ResNums))
.Ve
.IP "\fBGetPocketSolventResiduesInfo\fR" 4
.IX Item "GetPocketSolventResiduesInfo"
.Vb 1
\&    GetPocketSolventResiduesInfo(MoleculeName, ChainName, LigandResName, LigandResNum, PocketDistanceCutoff)
.Ve
.Sp
Get information for solvent residues present in a pocket around a ligand
in a molecule. Solvent residues are identified using PyMOL 'solvent'
selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 6
\&    MoleculeName (str): Name of a PyMOL molecule object.
\&    ChainName (str): Name of a chain in a molecule.
\&    LigandResName (str): Residue name of a ligand in a chain.
\&    LigandResNum (str): Residue number of a ligand in a chain.
\&    PocketDistanceCutoff (float): Distance around ligand to identify pocket
\&        residues.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 3
\&    dict: A dictionary containing list of residue names and dictionaries of
\&        residue numbers and residue count for each residue. Names of 
\&        residues in the dictionary are not sorted.
.Ve
.Sp
\&\fIExample(s):\fR
.Sp
.Vb 6
\&    ResiduesInfo = GetPocketSolventResiduesInfo(MolName, ChainName)
\&    for ResName in ResiduesInfo["ResNames"]:
\&        ResCount = ResiduesInfo["ResCount"][ResName]
\&        ResNums = ResiduesInfo["ResNum"][ResName]
\&        MiscUtil.PrintInfo("ResName: %s; ResCount: %s; ResNums: %s" %
\&            (ResName, ResCount, ResNums))
.Ve
.IP "\fBGetPolymerResiduesInfo\fR" 4
.IX Item "GetPolymerResiduesInfo"
.Vb 1
\&    GetPolymerResiduesInfo(MoleculeName, ChainName)
.Ve
.Sp
Get information for residues present in a chain of a  molecule.
Chains are identified using PyMOL 'polymer' selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    MoleculeName (str): Name of a PyMOL molecule object.
\&    ChainName (str): Name of a chain in a molecule.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 3
\&    dict: A dictionary containing list of residue names and dictionaries of
\&        residue numbers and residue count for each residue. Names of 
\&        residues in the dictionary are not sorted.
.Ve
.Sp
\&\fIExample(s):\fR
.Sp
.Vb 6
\&    ResiduesInfo = GetPolymerResiduesInfo(MolName, ChainName)
\&    for ResName in ResiduesInfo["ResNames"]:
\&        ResCount = ResiduesInfo["ResCount"][ResName]
\&        ResNums = ResiduesInfo["ResNum"][ResName]
\&        MiscUtil.PrintInfo("ResName: %s; ResCount: %s; ResNums: %s" %
\&            (ResName, ResCount, ResNums))
.Ve
.IP "\fBGetSolventResiduesInfo\fR" 4
.IX Item "GetSolventResiduesInfo"
.Vb 1
\&    GetSolventResiduesInfo(MoleculeName, ChainName)
.Ve
.Sp
Get information for solvent residues present in a chain of a  molecule.
Solvents are identified using PyMOL 'solvent' selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    MoleculeName (str): Name of a PyMOL molecule object.
\&    ChainName (str): Name of a chain in a molecule.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 3
\&    dict: A dictionary containing list of residue names and dictionaries of
\&        residue numbers and residue count for each residue. Names of 
\&        residues in the dictionary are not sorted.
.Ve
.Sp
\&\fIExample(s):\fR
.Sp
.Vb 6
\&    ResiduesInfo = GetSolventResiduesInfo(MolName, ChainName)
\&    for ResName in ResiduesInfo["ResNames"]:
\&        ResCount = ResiduesInfo["ResCount"][ResName]
\&        ResNums = ResiduesInfo["ResNum"][ResName]
\&        MiscUtil.PrintInfo("ResName: %s; ResCount: %s; ResNums: %s" %
\&            (ResName, ResCount, ResNums))
.Ve
.IP "\fBProcessChainsAndLigandsOptionsInfo\fR" 4
.IX Item "ProcessChainsAndLigandsOptionsInfo"
.Vb 1
\&    ProcessChainsAndLigandsOptionsInfo(ChainsAndLigandsInfo, ChainsOptionName, ChainsOptionValue, LigandsOptionName = None, LigandsOptionValue = None)
.Ve
.Sp
Process specified chain and ligand IDs using command line options.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 6
\&    ChainsAndLigandsInfo (dict): A dictionary containing information
\&        existing chains and ligands. 
\&    ChainsOptionName (str): Name of command line chains option.
\&    ChainsOptionValue (str): Value for command line chains option.
\&    LigandsOptionName (str): Name of command line ligands option.
\&    LigandsOptionValue (str): Value for command line ligands option.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 2
\&    dict: A dictionary containing list of chain identifiers and dictionaries
\&        of chains containing lists of ligand names for each chain.
.Ve
.Sp
\&\fIExample(s):\fR
.Sp
.Vb 6
\&    ChainsAndLigandsInfo = ProcessChainsAndLigandsOptionsInfo(Infile,
\&        MolName)
\&    for ChainID in ChainsAndLigandsInfo["ChainIDs"]:
\&        for LigandID in ChainsAndLigandsInfo["LigandIDs"][ChainID]:
\&            MiscUtil.PrintInfo("ChainID: %s; LigandID: %s" % (ChainID,
\&                LigandID))
.Ve
.IP "\fBSetupPMLForAlignment\fR" 4
.IX Item "SetupPMLForAlignment"
.Vb 1
\&    SetupPMLForAlignment(Method, RefSelection, FitSelection)
.Ve
.Sp
Setup \s-1PML\s0 commands for aligning a pair of selection using  a specified
alignment method.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 3
\&    Method (str): Alignment method. Possible values: align, cealign, super.
\&    RefSelection (str): Name of reference selection which stays stationary.
\&    FitSelection (str): Name of selection to align to reference selection.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for aligning  a pair of selections.
.Ve
.IP "\fBSetupPMLForBFactorPuttyView\fR" 4
.IX Item "SetupPMLForBFactorPuttyView"
.Vb 1
\&    SetupPMLForBFactorPuttyView(Name, Selection, ColorPalette = "blue_white_red", Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a B factor putty view for a specified
selection. The B factor values must be available for the atoms. The atoms
are colored using a color spectrum corresponding to a specified color
palette. Any valid PyMOL color palette name may be used.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 4
\&    Name (str): Name of a new PyMOL B factor putty object.
\&    Selection (str): Name of PyMOL selection.
\&    ColorPalette (str): Name of color palette to use for color spectrum.
\&    Enable (bool): Display status of B factor putty object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for B factor putty view.
.Ve
.IP "\fBSetupPMLForBallAndStickView\fR" 4
.IX Item "SetupPMLForBallAndStickView"
.Vb 1
\&    SetupPMLForBallAndStickView(Name, Selection, Enable = True, SphereScale = 0.3, StickRadius = 0.2)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a ball and stick view for a specified
selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 5
\&    Name (str): Name of a new PyMOL ball and stick object.
\&    Selection (str): Name of PyMOL selection.
\&    Enable (bool): Display status of ball and stick object.
\&    SphereScale (float): Scaling factor for sphere radii.
\&    StickScale (float): Scaling factor for stick radii.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for ball and stick view.
.Ve
.IP "\fBSetupPMLForEnableDisable\fR" 4
.IX Item "SetupPMLForEnableDisable"
.Vb 1
\&    SetupPMLForEnableDisable(Name, Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 command for enabling or disabling display of a PyMOL object.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 2
\&    Name (str): Name of a PyMOL object.
\&    Enable (bool): Display status.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML command for enabling or disabling display of an object.
.Ve
.IP "\fBSetupPMLForGroup\fR" 4
.IX Item "SetupPMLForGroup"
.Vb 1
\&    SetupPMLForGroup(GroupName, GroupMembersList, Enable = None, Action = None)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a group from a list of group members. The
display and open status of the group may be optionally set. The 'None' values
for Enable and Action imply usage of PyMOL defaults for the creation of group.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 4
\&    GroupName (str): Name of a PyMOL group.
\&    GroupMembersList (list): List of group member names.
\&    Enable (bool): Display status of group.
\&    Action (str): Open or close status of group object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for creating a group object.
.Ve
.IP "\fBSetupPMLForHydrophobicSurfaceView\fR" 4
.IX Item "SetupPMLForHydrophobicSurfaceView"
.Vb 1
\&    SetupPMLForHydrophobicSurfaceView(Name, Selection, ColorPalette = "RedToWhite", Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a hydrophobic surface view for a specified
selection. The surfaces are colored using a specified color palette. This is only valid
for amino acids.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 6
\&    Name (str): Name of a new PyMOL hydrophobic surface object.
\&    Selection (str): Name of PyMOL selection.
\&    ColorPalette (str): Name of color palette to use for coloring surfaces.
\&        Possible values: RedToWhite or WhiteToGreen for most hydrophobic
\&        to least hydrophobic amino acids.
\&    Enable (bool): Display status of surface object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for hydrophobic surface view.
.Ve
.IP "\fBSetupPMLForInorganicView\fR" 4
.IX Item "SetupPMLForInorganicView"
.Vb 1
\&    SetupPMLForInorganicView(Name, Selection, Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a inorganic view corresponding to
inorganic residues present in a selection. The inorganic residues are
identified using inorganic selection operator available in PyMOL. The
inorganic residues are displayed as 'lines' and 'nonbonded'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 3
\&    Name (str): Name of a new PyMOL inorganic object.
\&    Selection (str): Name of PyMOL selection.
\&    Enable (bool): Display status of inorganic object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for inorganic view.
.Ve
.IP "\fBSetupPMLForLigandPocketInorganicView\fR" 4
.IX Item "SetupPMLForLigandPocketInorganicView"
.Vb 1
\&    SetupPMLForLigandPocketInorganicView(Name, Selection, LigandSelection, DistanceCutoff, Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a ligand binding pocket view
corresponding to only inorganic residues present in a selection within a
specified distance from a ligand selection. The inorganic pocket residues
are shown as 'lines' and 'nonbonded'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 6
\&    Name (str): Name of a new PyMOL solvent binding pocket object.
\&    Selection (str): PyMOL selection containing binding pocket residues.
\&    LigandSelection (str): PyMOL selection containing ligand.
\&    DistanceCutoff (float): Distance cutoff from ligand for selecting
\&        binding pocket inorganic residues.
\&    Enable (bool): Display status of binding pocket object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 2
\&    str: PML commands for a ligand binding pocket view only showing inorganic
\&        residues.
.Ve
.IP "\fBSetupPMLForLigandPocketSolventView\fR" 4
.IX Item "SetupPMLForLigandPocketSolventView"
.Vb 1
\&    SetupPMLForLigandPocketSolventView(Name, Selection, LigandSelection, DistanceCutoff, Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a ligand binding pocket view
corresponding to only solvent residues present in a selection within a
specified distance from a ligand selection. The solvent pocket residues
are shown as 'lines' and 'nonbonded'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 6
\&    Name (str): Name of a new PyMOL solvent binding pocket object.
\&    Selection (str): PyMOL selection containing binding pocket residues.
\&    LigandSelection (str): PyMOL selection containing ligand.
\&    DistanceCutoff (float): Distance cutoff from ligand for selecting
\&        binding pocket solvent residues.
\&    Enable (bool): Display status of binding pocket object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 2
\&    str: PML commands for a ligand binding pocket view only showing solvent
\&        residues.
.Ve
.IP "\fBSetupPMLForLigandPocketView\fR" 4
.IX Item "SetupPMLForLigandPocketView"
.Vb 1
\&    SetupPMLForLigandPocketView(Name, Selection, LigandSelection, DistanceCutoff, Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a ligand binding pocket view
corresponding all residues present in a selection within a specified
distance from a ligand selection. The solvent and inorganic portions of
the selection are not included in the binding pocket. The pocket residues
are shown as 'lines'. The hydrogen atoms are not displayed.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 6
\&    Name (str): Name of a new PyMOL binding pocket object.
\&    Selection (str): PyMOL selection containing binding pocket residues.
\&    LigandSelection (str): PyMOL selection containing ligand.
\&    DistanceCutoff (float): Distance cutoff from ligand for selecting
\&        binding pockect residues.
\&    Enable (bool): Display status of binding pocket object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for a ligand binding pocket view.
.Ve
.IP "\fBSetupPMLForLigandView\fR" 4
.IX Item "SetupPMLForLigandView"
.Vb 1
\&    SetupPMLForLigandView(Name, Selection, LigandResName, Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a ligand view corresponding to a ligand 
present in a selection. The ligand is identified using organic selection
operator available in PyMOL in conjunction with the specified ligand \s-1ID.\s0
The ligand is colored by atom types and displayed as 'sticks'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 4
\&    Name (str): Name of a new PyMOL ligand object.
\&    Selection (str): PyMOL selection containing ligand.
\&    LigandResName (str): Ligand ID.
\&    Enable (bool): Display status of ligand object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for a ligand view.
.Ve
.IP "\fBSetupPMLForPolarContactsView\fR" 4
.IX Item "SetupPMLForPolarContactsView"
.Vb 1
\&    SetupPMLForPolarContactsView(Name, Selection1, Selection2, Enable = True, Color = "yellow")
.Ve
.Sp
Setup \s-1PML\s0 commands for creating polar contacts view between a pair of
selections. The polar contact view is generated using 'util.dist' command. The
distance labels are shown by default.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 5
\&    Name (str): Name of a new PyMOL polar contacts object.
\&    Selection1 (str): First PyMOL selection.
\&    Selection2 (str): Second PyMOL selection.
\&    Enable (bool): Display status of polar contacts object.
\&    Colot (str): Color for polar contact lines and labels.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for polar contacts view between a pair of selections.
.Ve
.IP "\fBSetupPMLForPolymerChainComplexView\fR" 4
.IX Item "SetupPMLForPolymerChainComplexView"
.Vb 1
\&    SetupPMLForPolymerChainComplexView(ChainComplexName, Selection, ChainName, Enable = True, ShowSolvent = True, ShowInorganic = True, ShowLines = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a polymer chain complex view for a specified
chain in a selection. The solvent and inorganic residues are also shown by
default. The polymer chain is displayed as 'cartoon'. The 'line' display for the
polymer chain is also shown and may be turned off. The organic residues are
displayed as 'sticks'. The solvent and inorganic residues are displayed as
\&'nonbonded' and 'lines'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 7
\&    ChainComplexName (str): Name of a new PyMOL polymer chain complex.
\&    Selection (str): Name of PyMOL selection.
\&    ChainName (str): Name of a chain.
\&    Enable (bool): Display status of chain object.
\&    ShowSolvent (bool): Display solvent residues.
\&    ShowInorganic (bool): Display inorganic residues.
\&    ShowLines (bool): Display lines for polymer chain.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for polymer chain complex view.
.Ve
.IP "\fBSetupPMLForPolymerChainView\fR" 4
.IX Item "SetupPMLForPolymerChainView"
.Vb 1
\&    SetupPMLForPolymerChainView(Name, Selection, Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a polymer chain view corresponding
to backbone and sidechain residues in a selection. The polymer chain is
displayed as 'cartoon'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 3
\&    Name (str): Name of a new PyMOL polymer chain object.
\&    Selection (str): Name of PyMOL selection.
\&    Enable (bool): Display status of chain object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for polymer chain view.
.Ve
.IP "\fBSetupPMLForPolymerComplexView\fR" 4
.IX Item "SetupPMLForPolymerComplexView"
.Vb 1
\&    SetupPMLForPolymerComplexView(MoleculeName, PDBFile, Enable = True, ShowSolvent = True, ShowInorganic = True, ShowLines = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a polymer complex view for all chains
in a \s-1PDB\s0 file. The solvent and inorganic residues are also shown by default.
 The polymer chains are displayed as 'cartoon'. The 'line' display for the
polymer chains is also shown and may be turned off. The organic residues are
displayed as 'sticks'. The solvent and inorganic residues are displayed as
\&'nonbonded' and 'lines'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 6
\&    MoleculeName (str): Name of a new PyMOL molecule object.
\&    PDBFile (str): Name of PDB file.
\&    Enable (bool): Display status of chain object.
\&    ShowSolvent (bool): Display solvent residues.
\&    ShowInorganic (bool): Display inorganic residues.
\&    ShowLines (bool): Display lines for polymer chains.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for polymer complex view.
.Ve
.IP "\fBSetupPMLForSolventView\fR" 4
.IX Item "SetupPMLForSolventView"
.Vb 1
\&    SetupPMLForSolventView(Name, Selection, Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a solvent view corresponding to
solvent residues present in a selection. The solvent residues are
identified using solvent selection operator available in PyMOL. The
solvent residues are displayed as 'nonbonded'.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 3
\&    Name (str): Name of a new PyMOL solvent object.
\&    Selection (str): Name of PyMOL selection.
\&    Enable (bool): Display status of inorganic object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for solvent view.
.Ve
.IP "\fBSetupPMLForSurfaceView\fR" 4
.IX Item "SetupPMLForSurfaceView"
.Vb 1
\&    SetupPMLForSurfaceView(Name, Selection, Enable = True)
.Ve
.Sp
Setup \s-1PML\s0 commands for creating a molecular surface view for a specified
selection.
.Sp
\&\fIArguments:\fR
.Sp
.Vb 3
\&    Name (str): Name of a new PyMOL molecular surface object.
\&    Selection (str): Name of PyMOL selection.
\&    Enable (bool): Display status of surface object.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: PML commands for molecular surface view.
.Ve
.IP "\fBSetupPMLHeaderInfo\fR" 4
.IX Item "SetupPMLHeaderInfo"
.Vb 1
\&    SetupPMLHeaderInfo(ScriptName = None, IncludeLocalPython = True)
.Ve
.Sp
Setup header information for generating \s-1PML\s0 files. The local Python
functions are optionally embedded in the header information for their
\&\fIArguments:\fR
.Sp
.Vb 2
\&    ScriptName (str): Name of script calling the function.
\&    IncludeLocalPython (bool): Include local Python functions.
.Ve
.Sp
\&\fIReturns:\fR
.Sp
.Vb 1
\&    str: Text containing header information for generating PML files.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud <msud@san.rr.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2018 Manish Sud. All rights reserved.
.PP
The functionality available in this file is implemented using PyMOL, a
molecular visualization system on an open source foundation originally
developed by Warren DeLano.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
