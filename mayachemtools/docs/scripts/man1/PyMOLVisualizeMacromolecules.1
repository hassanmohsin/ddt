.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PyMOLVisualizeMacromolecules 1"
.TH PyMOLVisualizeMacromolecules 1 "2018-09-11" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PyMOLVisualizeMacromolecules.py \- Visualize macromolecules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
PyMOLVisualizeMacromolecules.py [\fB\-\-align\fR <yes or no>] [\fB\-\-alignMethod\fR <align, cealign, super>]
[\fB\-\-alignMode\fR <FirstChain or Complex>] [\fB\-\-alignRefFile\fR <filename>]
[\fB\-\-allowEmptyObjects\fR <yes or no>] [\fB\-\-chainIDs\fR <First, All or \s-1ID1,ID2...\s0>]
[\fB\-\-ligandIDs\fR <Largest, All or \s-1ID1,ID2...\s0>] [\fB\-\-labelFontID\fR <number>]
[\fB\-\-PMLOut\fR <yes or no>] [\fB\-\-pocketContactsInorganicColor\fR <text>]
[\fB\-\-pocketContactsLigandColor\fR <text>] [\fB\-\-pocketContactsSolventColor\fR <text>]
[\fB\-\-pocketDistanceCutoff\fR <number>] [\fB\-\-pocketLabelColor\fR <text>]
[\fB\-\-pocketSurface\fR <yes or no>] [\fB\-\-surfaceChain\fR <yes or no>]
[\fB\-\-surfaceChainComplex\fR <yes or no>] [\fB\-\-surfaceComplex\fR <yes or no>]
[\fB\-\-surfaceColorPalette\fR <RedToWhite or WhiteToGreen>]
[\fB\-\-surfaceElectrostaticsChain\fR <yes or no>] [\fB\-\-surfaceTransparency\fR <number>]
[\fB\-\-overwrite\fR] [\fB\-w\fR <dir>] \fB\-i\fR <infile1,infile2,infile3...> \fB\-o\fR <outfile>
.PP
PyMOLVisualizeMacromolecules.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generate PyMOL visualization files for viewing surfaces, chains, ligands, ligand
binding pockets, and interactions between ligands and binding pockets in
macromolecules including proteins and nucleic acids.
.PP
The supported input file format are: \s-1PDB \s0(.pdb), \s-1CIF \s0(.cif)
.PP
The supported output file formats are: PyMOL script file (.pml), PyMOL session
file (.pse)
.PP
A variety of PyMOL groups and objects may be  created for visualization of
macromolecules. These groups and objects correspond to complexes, surfaces,
chains, ligands, inorganics, ligand binding pockets, pocket, polar interactions,
and pocket hydrophobic surfaces. A complete hierarchy of all possible PyMOL
groups and objects is shown below:
.PP
.Vb 10
\&    <PDBFileRoot>
\&        .Complex
\&            .Complex
\&            .Surface
\&        .Chain<ID>
\&            .Complex
\&                .Complex
\&                .Surface
\&            .Chain
\&                .Chain
\&                .Surface
\&                .Vacuum_Electrostatics
\&                    .Contact_Potentials
\&                    .Map
\&                    .Legend
\&            .Solvent
\&            .Inorganic
\&            .Ligand<ID>
\&                .Ligand
\&                    .Ligand
\&                    .BallAndStick
\&                .Pocket
\&                    .Pocket
\&                    .Polar_Contacts
\&                    .Surface
\&                .Pocket_Solvent
\&                    .Pocket_Solvent
\&                    .Polar_Contacts
\&                .Pocket_Inorganic
\&                    .Pocket_Inorganic
\&                    .Polar_Contacts
\&            .Ligand<ID>
\&                .Ligand
\&                    ... ... ...
\&                .Pocket
\&                    ... ... ...
\&                .Pocket_Solvent
\&                    ... ... ...
\&                .Pocket_Inorganic
\&                    ... ... ...
\&        .Chain<ID>
\&            ... ... ...
\&            .Ligand<ID>
\&                ... ... ...
\&            .Ligand<ID>
\&                ... ... ...
\&        .Chain<ID>
\&            ... ... ...
.Ve
.PP
The hydrophobic surfaces are not cerated for complete complex and chain complex
in input file(s) by default. In addition, the creation of chain surface corresponding to
vacuum electrostatics contact potential is turned off by default. A word to the wise:
The creation of surface objects may slow down loading of \s-1PML\s0 file and generation of
\&\s-1PSE\s0 file, based on the size of input complexes. The generation of \s-1PSE\s0 file may also
fail.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a, \-\-align\fR <yes or no>  [default: no]" 4
.IX Item "-a, --align <yes or no> [default: no]"
Align input files to a reference file before visualization.
.IP "\fB\-\-alignMethod\fR <align, cealign, super>  [default: super]" 4
.IX Item "--alignMethod <align, cealign, super> [default: super]"
Alignment methodology to use for aligning input files to a
reference file.
.IP "\fB\-\-alignMode\fR <FirstChain or Complex>  [default: FirstChain]" 4
.IX Item "--alignMode <FirstChain or Complex> [default: FirstChain]"
Portion of input and reference files to use for spatial alignment of
input files against reference file.  Possible values: FirstChain or
Complex.
.Sp
The FirstChain mode allows alignment of the first chain in each input
file to the first chain in the reference file along with moving the rest
of the complex to coordinate space of the reference file. The complete
complex in each input file is aligned to the complete complex in reference
file for the Complex mode.
.IP "\fB\-\-alignRefFile\fR <filename>  [default: FirstInputFile]" 4
.IX Item "--alignRefFile <filename> [default: FirstInputFile]"
Reference input file name. The default is to use the first input file
name specified using '\-i, \-\-infiles' option.
.IP "\fB\-\-allowEmptyObjects\fR <yes or no>  [default: no]" 4
.IX Item "--allowEmptyObjects <yes or no> [default: no]"
Allow creation of empty PyMOL objects corresponding to solvent and
inorganic atom selections across chains and ligands in input file(s). By
default, the empty objects are marked for deletion.
.IP "\fB\-c, \-\-chainIDs\fR <First, All or \s-1ID1,ID2...\s0>  [default: First]" 4
.IX Item "-c, --chainIDs <First, All or ID1,ID2...> [default: First]"
List of chain IDs to use for visualizing macromolecules. Possible values:
First, All, or a comma delimited list of chain IDs. The default is to use the
chain \s-1ID\s0 for the first chain in input file.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-i, \-\-infiles\fR <infile1,infile2,infile3...>" 4
.IX Item "-i, --infiles <infile1,infile2,infile3...>"
Input file name.
.IP "\fB\-l, \-\-ligandIDs\fR <Largest, All or \s-1ID1,ID2...\s0>  [default: Largest]" 4
.IX Item "-l, --ligandIDs <Largest, All or ID1,ID2...> [default: Largest]"
List of ligand IDs present in chains for visualizing macromolecules to
highlight ligand interactions. Possible values: Largest, All, or a comma
delimited list of ligand IDs. The default is to use the largest ligand present
in all or specified chains in input file.
.Sp
Ligands are identified using organic selection operator available in PyMOL.
It'll also  identify buffer molecules as ligands. The largest ligand contains
the highest number of heavy atoms.
.IP "\fB\-\-labelFontID\fR <number>  [default: 7]" 4
.IX Item "--labelFontID <number> [default: 7]"
Font \s-1ID\s0 for drawing labels. Default: 7 (Sans Bold). Valid values: 5 to 16.
The specified value must be a valid PyMOL font \s-1ID.\s0 No validation is
performed. The complete lists of valid font IDs is available at:
pymolwiki.org/index.php/Label_font_id. Examples: 5 \- Sans;
7 \- Sans Bold; 9 \- Serif; 10 \- Serif Bold.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-p, \-\-PMLOut\fR <yes or no>  [default: yes]" 4
.IX Item "-p, --PMLOut <yes or no> [default: yes]"
Save \s-1PML\s0 file during generation of \s-1PSE\s0 file.
.IP "\fB\-\-pocketContactsInorganicColor\fR <text>  [default: deepsalmon]" 4
.IX Item "--pocketContactsInorganicColor <text> [default: deepsalmon]"
Color for drawing polar contacts between inorganic and pocket residues.
The specified value must be valid color. No validation is performed.
.IP "\fB\-\-pocketContactsLigandColor\fR <text>  [default: orange]" 4
.IX Item "--pocketContactsLigandColor <text> [default: orange]"
Color for drawing polar contacts between ligand and pocket residues.
The specified value must be valid color. No validation is performed.
.IP "\fB\-\-pocketContactsSolventColor\fR <text>  [default: marine]" 4
.IX Item "--pocketContactsSolventColor <text> [default: marine]"
Color for drawing polar contacts between solvent and pocket residues..
The specified value must be valid color. No validation is performed.
.IP "\fB\-\-pocketDistanceCutoff\fR <number>  [default: 5.0]" 4
.IX Item "--pocketDistanceCutoff <number> [default: 5.0]"
Distance in Angstroms for identifying pocket residues around ligands.
.IP "\fB\-\-pocketLabelColor\fR <text>  [default: magenta]" 4
.IX Item "--pocketLabelColor <text> [default: magenta]"
Color for drawing residue or atom level labels for a pocket. The specified
value must be valid color. No validation is performed.
.IP "\fB\-\-pocketSurface\fR <yes or no>  [default: yes]" 4
.IX Item "--pocketSurface <yes or no> [default: yes]"
Hydrophobic surface around pocket. The pocket surface is colored by
hydrophobicity. It is only valid for proteins. The color of amino acids is
set using the Eisenberg hydrophobicity scale. The color varies from red
to white, red being the most hydrophobic amino acid.
.IP "\fB\-\-surfaceChain\fR <yes or no>  [default: yes]" 4
.IX Item "--surfaceChain <yes or no> [default: yes]"
Hydrophobic surface around individual chain. The  surface is colored by
hydrophobicity. It is only valid for proteins.
.IP "\fB\-\-surfaceChainComplex\fR <yes or no>  [default: no]" 4
.IX Item "--surfaceChainComplex <yes or no> [default: no]"
Hydrophobic surface around chain complete complex. The  surface is colored
by hydrophobicity. It is only valid for proteins.
.IP "\fB\-\-surfaceComplex\fR <yes or no>  [default: no]" 4
.IX Item "--surfaceComplex <yes or no> [default: no]"
Hydrophobic surface around complete complex. The  surface is colored by
hydrophobicity. It is only valid for proteins.
.IP "\fB\-\-surfaceColorPalette\fR <RedToWhite or WhiteToGreen>  [default: RedToWhite]" 4
.IX Item "--surfaceColorPalette <RedToWhite or WhiteToGreen> [default: RedToWhite]"
Color palette for hydrophobic surfaces around chains and pockets in proteins.
Possible values: RedToWhite or WhiteToGreen from most hydrophobic amino
acid to least hydrophobic. The colors values for amino acids are taken from
color_h script available as part of the Script Library at PyMOL Wiki.
.IP "\fB\-\-surfaceElectrostaticsChain\fR <yes or no>  [default: no]" 4
.IX Item "--surfaceElectrostaticsChain <yes or no> [default: no]"
Vacuum electrostatics contact potential surface around individual chain.
A word of to the wise from PyMOL documentation: The computed protein
contact potentials are only qualitatively useful, due to short cutoffs,
truncation, and lack of solvent \*(L"screening\*(R".
.IP "\fB\-\-surfaceTransparency\fR <number>  [default: 0.25]" 4
.IX Item "--surfaceTransparency <number> [default: 0.25]"
Surface transparency for molecular surfaces.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To visualize the first chain, the largest ligand in the first chain, and ligand
binding pockets to highlight ligand interaction with pocket resiudes, solvents
and inorganics, in a \s-1PDB\s0 file, and generate a \s-1PML\s0 file, type:
.PP
.Vb 1
\&    % PyMOLVisualizeMacromolecules.py \-i Sample4.pdb \-o Sample4.pml
.Ve
.PP
To visualize all chains, all ligands in all chains, and all ligand binding pockets to
highlight ligand interaction with pocket resiudes, solvents and inorganics, in a
\&\s-1PDB\s0 file, and generate a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % PyMOLVisualizeMacromolecules.py \-c All \-l All \-i Sample4.pdb \-o
\&      Sample4.pml
.Ve
.PP
To visualize all chains, ligands, and ligand binding pockets along with displaying
all hydrophibic surfaces and chain electrostatic surface, in a \s-1PDB\s0 file, and
generate a \s-1PML\s0 file, type:
.PP
.Vb 3
\&    % PyMOLVisualizeMacromolecules.py \-c All \-l All
\&      \-\-surfaceElectrostaticsChain yes \-\-surfaceChainComplex yes
\&      \-\-surfaceComplex yes \-i Sample4.pdb \-o Sample4.pml
.Ve
.PP
To visualize chain E, ligand \s-1ADP\s0 in chain E, and ligand binding pockets to
highlight ligand interaction with pocket resiudes, solvents and inorganics,
in a \s-1PDB\s0 file, and generate a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % PyMOLVisualizeMacromolecules.py \-c E \-l ADP \-i Sample3.pdb
\&      \-o Sample3.pml
.Ve
.PP
To visualize chain E, ligand \s-1ADP\s0 in chain E, and ligand binding pockets to
highlight ligand interaction with pocket resiudes, solvents and inorganics,
in a \s-1PDB\s0 file, and generate a \s-1PSE\s0 file, type:
.PP
.Vb 2
\&    % PyMOLVisualizeMacromolecules.py \-c E \-l ADP \-i Sample3.pdb
\&      \-o Sample3.pse
.Ve
.PP
To visualize the first chain, the largest ligand in the first chain, and ligand
binding pockets to highlight ligand interaction with pocket resiudes, solvents
and inorganics, in \s-1PDB\s0 files, along with aligning first chain in each input file to
the first chain in first input file, and generate a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % PyMOLVisualizeMacromolecules.py \-\-align yes \-i
\&      "Sample5.pdb,Sample6.pdb,Sample7.pdb" \-o SampleOut.pml
.Ve
.PP
To visualize all chains, all ligands in all chains, and all ligand binding pockets to
highlight ligand interaction with pocket resiudes, solvents and inorganics, in
\&\s-1PDB\s0 files, along with aligning first chain in each input file to the first chain in
first input file, and generate a \s-1PML\s0 file, type:
.PP
.Vb 2
\&    % PyMOLVisualizeMacromolecules.py \-\-align yes  \-c All \-l All \-i
\&      "Sample5.pdb,Sample6.pdb,Sample7.pdb" \-o SampleOut.pml
.Ve
.PP
To visualize all chains, all ligands in all chains, and all ligand binding pockets to
highlight ligand interaction with pocket resiudes, solvents and inorganics, in
\&\s-1PDB\s0 files, along with aligning first chain in each input file to the first chain in a
specified \s-1PDB\s0 file using a specified alignment method, and generate a \s-1PML\s0
file, type:
.PP
.Vb 3
\&    % PyMOLVisualizeMacromolecules.py \-\-align yes  \-\-alignMode FirstChain
\&      \-\-alignRefFile Sample5.pdb \-\-alignMethod super   \-c All  \-l All \-i
\&      "Sample5.pdb,Sample6.pdb,Sample7.pdb" \-o SampleOut.pml
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DownloadPDBFiles.pl,  PyMOLVisualizeCryoEMDensity.py,
PyMOLVisualizeElectronDensity.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2018 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using PyMOL, a
molecular visualization system on an open source foundation originally
developed by Warren DeLano.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
